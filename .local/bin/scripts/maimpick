#!/bin/bash

output_dir="$HOME/Pictures/Screenshots"
output="$(date '+%s%3N %d-%m-%Y %H-%M-%S').png"
screenshot_output="$output_dir/$output"
area=""

capture_command="maim --hidecursor -q -d 0.2"
xclip_cmd="xclip -sel clip -t image/png"

# ensure output screenshot directory exists
mkdir -p "$output_dir"

get_monitor_geometry() {
    # mouse coordinates
    eval "$(xdotool getmouselocation --shell)"
    mouse_x=$X
    mouse_y=$Y

    # get all connected monitors
    monitor_info=$(xrandr | grep -w connected)

    # loop over each monitor in monitor info using the regex pattern
    while [[ $monitor_info =~ [0-9]+x[0-9]+\+[0-9]+\+[0-9]+ ]]; do
        monitor_geometry="${BASH_REMATCH[0]}"
        # remove the matched pattern to avoid duplicate matches
        monitor_info="${monitor_info#*$monitor_geometry}"
        monitor_width=$(echo "$monitor_geometry" | cut -d "x" -f 1)
        monitor_height=$(echo "$monitor_geometry" | cut -d "x" -f 2 | cut -d "+" -f 1)
        monitor_x=$(echo "$monitor_geometry" | cut -d "+" -f 2)
        monitor_y=$(echo "$monitor_geometry" | cut -d "+" -f 3)
        # find out which screen the mouse is on
        if [ "$mouse_x" -ge "$monitor_x" ] && [ "$mouse_x" -le $(($monitor_x + $monitor_width)) ] &&
            [ "$mouse_y" -ge "$monitor_y" ] && [ "$mouse_y" -le $(($monitor_y + $monitor_height)) ]; then
            echo "$monitor_geometry"
            break
        fi
    done
}

capture_screenshot() {
    case "$area" in
    "area")
        capture_command_args="-u -s"
        ;;
    "window")
        capture_command_args="-i $(xdotool getactivewindow)"
        ;;
    "screen")
        capture_command_args="-g $(get_monitor_geometry)"
        ;;
    "all screens") ;;
    *)
        echo "Invalid capture area: $area" >&2
        exit 1
        ;;
    esac

    # capture screenshot
    $capture_command $capture_command_args "$screenshot_output" >/dev/null

    # copy to clipboard
    cat "$screenshot_output" | $xclip_cmd
}

if [ "$#" -eq 1 ]; then
    area="$1"
    capture_screenshot
else
    area=$(printf "area\\nwindow\\nscreen\\nall screens" | dmenu -l 4 -i -p "Screenshot which area?")
    capture_screenshot
fi
